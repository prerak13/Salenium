# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


class TestBSSP():
    def __init__(self):
        self.driver = webdriver.Firefox()
        self.vars = {}

    def teardown_method(self, method):
        self.driver.quit()

    def wait_for_window(self, timeout=2):
        time.sleep(round(timeout / 1000))
        wh_now = self.driver.window_handles
        wh_then = self.vars["window_handles"]
        if len(wh_now) > len(wh_then):
            return set(wh_now).difference(set(wh_then)).pop()

    def test_bSSP(self):
        # Test name: BS_SP
        # Step # | name | target | value
        # 1 | open | / |
        self.driver.get("https://www.office.com/")
        # 2 | setWindowSize | 1280x680 |
        self.driver.set_window_size(1280, 680)
        # 3 | click | id=switch-account-link |

        self.driver.find_element(
            By.ID, "hero-banner-sign-in-to-office-365-link").click()

        self.driver.find_element(By.ID, "i0116").send_keys(
            "prerak@rajaniket.onmicrosoft.com")
        self.driver.find_element(By.ID, "idSIButton9").click()
        self.driver.find_element(By.ID, "i0118").send_keys("Sharepoint@")
        element = WebDriverWait(self.driver, 10).until(
            EC.element_to_be_clickable((By.ID, "idSIButton9"))
        )
        self.driver.implicitly_wait(5)

        self.driver.find_element(By.ID, "idSIButton9").click()

        # 9 | mouseOver | css=#ShellExcelOnline_link_text > .workload-item__text--fluent |
        element = self.driver.find_element(
            By.CSS_SELECTOR, "#ShellExcelOnline_link_text > .workload-item__text--fluent")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        # 10 | mouseOut | css=#ShellExcelOnline_link_text > .workload-item__text--fluent |
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element, 0, 0).perform()
        # 11 | mouseOver | id=ShellOneNoteOnline_link_text |
        element = self.driver.find_element(
            By.ID, "ShellOneNoteOnline_link_text")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        # 12 | mouseOut | id=ShellOneNoteOnline_link_text |
        element = self.driver.find_element(By.CSS_SELECTOR, "body")
        actions = ActionChains(self.driver)
        actions.move_to_element(element, 0, 0).perform()
        # 13 | click | id=ShellSites_link_text |
        self.vars["window_handles"] = self.driver.window_handles
        # 14 | selectWindow | handle=${win5716} |
        self.driver.find_element(By.ID, "ShellSites_link_text").click()
        # 15 | click | css=.CardFocusZone:nth-child(3) > .ContainerCard-withActivities .ContainerCard-subTitle |
        self.vars["win5716"] = self.wait_for_window(2000)
        self.driver.switch_to.window(self.vars["win5716"])
        self.driver.find_element(
            By.CSS_SELECTOR, ".CardFocusZone:nth-child(3) > .ContainerCard-withActivities .ContainerCard-subTitle").click()


x = TestBSSP()
x.test_bSSP()
